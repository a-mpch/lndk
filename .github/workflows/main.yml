name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["*"]

env:
  GO_VERSION: 1.21.0
  RUST_TOOLCHAIN: 1.83.0

jobs:
  build_and_format:
    name: LNDK Rust Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy
      - run: sudo apt-get install protobuf-compiler
      - run: cargo build --release --all-features
      - run: cargo fmt -- --config unstable_features=true --config wrap_comments=true --config comment_width=100 --check
      - run: cargo clippy -- --deny warnings

  ########################
  # run ubuntu integration tests
  ########################
  ubuntu-integration-test:
    name: run ubuntu unit and integration tests
    runs-on: ubuntu-latest
    env:
      TMPDIR: /tmp
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - run: sudo apt-get install protobuf-compiler
      - name: setup go ${{ env.GO_VERSION }}
        uses: lightningnetwork/lnd/.github/actions/setup-go@v0-16-4-branch
        with:
          go-version: "${{ env.GO_VERSION }}"
      - name: run unit tests
        run: cargo test --bin lndk
      - name: run cli unit tests
        run: cargo test --bin lndk-cli
      - name: run integration tests
        run: make itest
      - name: collect logs on failure
        if: failure()
        run: |
          echo "Integration tests failed, collecting logs..."
          echo "=== SEARCHING FOR FAILED TESTS AND LOGS ==="

          # Look for the most recent test run logs
          TEST_DIRS=$(find /tmp/lndk-tests -type d -name "test-*" 2>/dev/null | sort -r | head -10)

          if [ -n "$TEST_DIRS" ]; then
            echo "Found test directories:"
            echo "$TEST_DIRS"
            echo ""
            
            # For each test directory, look for logs
            for test_dir in $TEST_DIRS; do
              test_name=$(basename "$test_dir" | sed 's/^test-//' | sed 's/-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$//')
              echo "=== LOGS FOR TEST: $test_name ==="
              echo "Test directory: $test_dir"
              
              LND_DATA_DIR="$test_dir/lnd-data"
              LNDK_DATA_DIR="$test_dir/lndk-data"
              LDK_LOG_DIR="$test_dir/ldk-data/ldk-logs"
              
              # Print LND stdout logs
              if [ -f "$LND_DATA_DIR/lnd-itest-stdout.log" ]; then
                echo ""
                echo "--- LND STDOUT LOGS (last 100 lines) ---"
                tail -100 "$LND_DATA_DIR/lnd-itest-stdout.log"
              fi
              
              # Print LND stderr logs
              if [ -f "$LND_DATA_DIR/lnd-itest-stderr.log" ]; then
                echo ""
                echo "--- LND STDERR LOGS (last 100 lines) ---"
                tail -100 "$LND_DATA_DIR/lnd-itest-stderr.log"
              fi
              
              # Print other LND logs
              if ls "$LND_DATA_DIR"/lnd-logs/lnd*.log 2>/dev/null >&2; then
                echo ""
                echo "--- OTHER LND LOGS ---"
                for log_file in "$LND_DATA_DIR"/lnd-logs/lnd*.log; do
                  if [ -f "$log_file" ]; then
                    echo "=== $(basename "$log_file") (last 50 lines) ==="
                    tail -50 "$log_file"
                    echo ""
                  fi
                done
              fi
              
              # Print LNDK logs
              if [ -f "$LNDK_DATA_DIR/lndk-logs.txt" ]; then
                echo ""
                echo "--- LNDK LOGS (last 100 lines) ---"
                tail -100 "$LNDK_DATA_DIR/lndk-logs.txt"
              fi

              # Print LDK logs
              if [ -f "$LDK_LOG_DIR/logs-ldk1.txt" ]; then
                echo ""
                echo "--- LDK 1 LOGS (last 100 lines) ---"
                tail -100 "$LDK_LOG_DIR/logs-ldk1.txt"
              fi

              if [ -f "$LDK_LOG_DIR/logs-ldk2.txt" ]; then
                echo ""
                echo "--- LDK 2 LOGS (last 100 lines) ---"
                tail -100 "$LDK_LOG_DIR/logs-ldk2.txt"
              fi
              
              echo ""
              echo "=================================================="
              echo ""
            done
          else
            echo "No test directories found in /tmp/lndk-tests"
            echo "Listing /tmp contents:"
            ls -la /tmp/ | grep -E "(lndk|test)" || echo "No lndk/test related files found"
          fi

          # Also try to find any recent cargo test output
          echo ""
          echo "=== SEARCHING FOR RECENT TEST OUTPUT ==="
          if [ -f "$GITHUB_WORKSPACE/test_output.log" ]; then
            echo "Found test output log:"
            tail -200 "$GITHUB_WORKSPACE/test_output.log"
          fi

  coverage:
    name: LNDK Code Coverage
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - run: sudo apt-get install protobuf-compiler
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --bin lndk --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  check-flake:
    name: Check Nix Flake
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v8

      - name: Install Nix
        uses: cachix/install-nix-action@V27
        with:
          nix_path: nixpkgs=channel:nixos-24.05
      - name: Check flake
        run: nix flake check
